scalar DateTime
  @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
  
extend type Query{
    # bookings: [Booking!]! @paginate(defaultCount: 10)
    bookings(filter: BookingFilter): [Booking!]! @field(resolver: "App\\GraphQL\\Queries\\BookingQuery@filter")
}

extend type Mutation{
   createBookingByUser(input: CreateBookingByUserInput! @spread): Booking! @field(resolver: "App\\GraphQL\\Mutations\\BookingMutation@createBookingByUser")
   createBookingByGroup(input: CreateBookingByGroupInput! @spread): Booking! @field(resolver: "App\\GraphQL\\Mutations\\BookingMutation@createBookingByGroup")
}

input BookingFilter{
    checkInDate: DateTime
    checkOutDate: DateTime
    targetId: String
}

input CreateBookingByUserInput{
    userId: String  @rules(apply: ["string"]),
    checkInDate: DateTime  @rules(apply: ["date"]),
    checkOutDate: DateTime  @rules(apply: ["date"]),
    numberOfPeople: Int @rules(apply: ["numeric"]),
    singleNumber: Int @rules(apply: ["numeric"]),
    doubleNumber: Int @rules(apply: ["numeric"]),
    tripleNumber: Int @rules(apply: ["numeric"]),
    quarterNumber: Int @rules(apply: ["numeric"]),
}

input CreateBookingByGroupInput{
    userId: String  @rules(apply: ["string"]),
    groupId: String  @rules(apply: ["string"]),
    checkInDate: DateTime  @rules(apply: ["date"]),
    checkOutDate: DateTime  @rules(apply: ["date"]),
    numberOfPeople: Int @rules(apply: ["numeric"]),
    singleNumber: Int @rules(apply: ["numeric"]),
    doubleNumber: Int @rules(apply: ["numeric"]),
    tripleNumber: Int @rules(apply: ["numeric"]),
    quarterNumber: Int @rules(apply: ["numeric"]),
}
